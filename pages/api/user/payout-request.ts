// pages/api/user/payout-request.ts
import type { NextApiRequest, NextApiResponse } from 'next';
import prisma from '../../../lib/prisma';
import jwt from 'jsonwebtoken';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –∏–∑ Prisma client –¥–ª—è —Å—Ç—Ä–æ–≥–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
import { User, PayoutRequest } from '@prisma/client'; 
const ADMIN_TELEGRAM_ID = process.env.ADMIN_TELEGRAM_ID!; // –ü–æ–ª—É—á–∞–µ–º chat_id –∞–¥–º–∏–Ω–∞
const TELEGRAM_BOT_TOKEN = process.env.BOT_TOKEN!; 
const JWT_SECRET = process.env.JWT_SECRET!;
const MIN_PAYOUT_AMOUNT = 1000; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª–µ–∑–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ JWT
interface JwtPayload {
  userId: string; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ userId —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
  // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –≤–∞—à–µ–º —Ç–æ–∫–µ–Ω–µ
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'POST') {
    return handleCreatePayoutRequest(req, res);
  } else if (req.method === 'GET') {
    return handleGetPayoutRequests(req, res);
  } else {
    return res.status(405).json({ message: 'Method not allowed' });
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É
async function handleCreatePayoutRequest(req: NextApiRequest, res: NextApiResponse) {
  try {
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({ message: 'Authorization token required' });
    }

    const token = authHeader.substring(7);
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø –∫ JwtPayload
    const decoded = jwt.verify(token, JWT_SECRET) as JwtPayload; 
    const userId = decoded.userId;

    const { cardNumber, cardHolderName, bankName } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!cardNumber || !cardHolderName || !bankName) {
      return res.status(400).json({ 
        message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' 
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { id: userId }
    });

    if (!user) {
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const availableBalance = Number(user.availableBalance);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
    if (availableBalance < MIN_PAYOUT_AMOUNT) {
      return res.status(400).json({ 
        message: `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã: ${MIN_PAYOUT_AMOUNT} ‚ÇΩ` 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const activeRequest = await prisma.payoutRequest.findFirst({
      where: {
        userId,
        status: { in: ['PENDING', 'PROCESSING'] }
      }
    });

    if (activeRequest) {
      return res.status(400).json({ 
        message: '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É' 
      });
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É
    const payoutRequest = await prisma.payoutRequest.create({
      data: {
        userId,
        amount: availableBalance,
        cardNumber: cardNumber.replace(/\s/g, ''), // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
        cardHolderName,
        bankName,
        status: 'PENDING'
      }
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await sendPayoutNotificationToAdmin(user, payoutRequest);

    res.status(201).json({ 
      message: '–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ',
      request: {
        id: payoutRequest.id,
        amount: Number(payoutRequest.amount),
        status: payoutRequest.status,
        requestedAt: payoutRequest.requestedAt
      }
    });

  } catch (error) {
    console.error('Error creating payout request:', error);
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É
async function handleGetPayoutRequests(req: NextApiRequest, res: NextApiResponse) {
  try {
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({ message: 'Authorization token required' });
    }

    const token = authHeader.substring(7);
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø –∫ JwtPayload
    const decoded = jwt.verify(token, JWT_SECRET) as JwtPayload; 
    const userId = decoded.userId;

    const requests = await prisma.payoutRequest.findMany({
      where: { userId },
      orderBy: { requestedAt: 'desc' }
    });

    const formattedRequests = requests.map(request => ({
      id: request.id,
      amount: Number(request.amount),
      status: request.status,
      requestedAt: request.requestedAt,
      processedAt: request.processedAt,
      adminComment: request.adminComment
    }));

    res.status(200).json(formattedRequests);

  } catch (error) {
    console.error('Error fetching payout requests:', error);
    res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
async function sendPayoutNotificationToAdmin(user: User, payoutRequest: PayoutRequest) {
  try {
    // const adminUsername = process.env.MANAGER_USERNAME || 'admin'; // –≠—Ç–æ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –ª–æ–≥–æ–≤/–æ—Ç–ª–∞–¥–∫–∏

    const message = `üîî *–ù–û–í–´–ô –ó–ê–ü–†–û–° –ù–ê –í–´–ü–õ–ê–¢–£*

üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${user.firstName || ''} ${user.lastName || ''}
üìû *Telegram:* @${user.username || user.telegramId}
üí∞ *–°—É–º–º–∞:* ${Number(payoutRequest.amount).toLocaleString()} ‚ÇΩ

üí≥ *–î–ê–ù–ù–´–ï –î–õ–Ø –ü–ï–†–ï–í–û–î–ê:*
–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: \`${payoutRequest.cardNumber}\`
–î–µ—Ä–∂–∞—Ç–µ–ª—å: ${payoutRequest.cardHolderName}
–ë–∞–Ω–∫: ${payoutRequest.bankName}

üÜî *ID –∑–∞–ø—Ä–æ—Å–∞:* \`${payoutRequest.id}\`
üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleString('ru-RU')}

‚ö†Ô∏è _–¢—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤_`;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ Telegram Bot API
    const telegramApiUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
    const response = await fetch(telegramApiUrl, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            chat_id: ADMIN_TELEGRAM_ID, // –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∞–¥–º–∏–Ω–∞
            text: message,
            parse_mode: 'MarkdownV2', // –í–∞–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown
        }),
    });

    if (!response.ok) {
        const errorData = await response.json();
        console.error('Failed to send Telegram notification:', errorData);
    } else {
        console.log('Telegram notification sent successfully to admin!');
    }

  } catch (error) {
    console.error('Error sending admin notification:', error);
  }
}