// pages/api/webhook/telegram.ts - Webhook –¥–ª—è Elite Market –±–æ—Ç–∞
import { NextApiRequest, NextApiResponse } from 'next';
import { userBot } from '../../../lib/telegramBots';

// –¢–∏–ø—ã –¥–ª—è Telegram API
interface TelegramUser {
  id: number;
  first_name?: string;
  last_name?: string;
  username?: string;
  language_code?: string;
  is_premium?: boolean;
}

interface TelegramMessage {
  message_id: number;
  from: TelegramUser;
  chat: {
    id: number;
    type: string;
  };
  date: number;
  text?: string;
}

interface TelegramCallbackQuery {
  id: string;
  from: TelegramUser;
  message: TelegramMessage;
  data?: string;
}

interface TelegramUpdate {
  update_id: number;
  message?: TelegramMessage;
  callback_query?: TelegramCallbackQuery;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–®–ò –î–ê–ù–ù–´–ï
const WEBAPP_URL = 'https://eliteapp-taupe.vercel.app'; // –í–∞—à –¥–æ–º–µ–Ω
const CHANNEL_USERNAME = '@your_elite_channel'; // –í–∞—à –∫–∞–Ω–∞–ª Elite Market
const CHANNEL_LINK = 'https://t.me/your_elite_channel'; // –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method not allowed' });
  }

  if (!userBot) {
    console.error('Elite Market bot not configured');
    return res.status(500).json({ message: 'Bot not configured' });
  }

  try {
    const update: TelegramUpdate = req.body;
    console.log('Elite Market bot received update:', JSON.stringify(update, null, 2));

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    if (update.message) {
      const message = update.message;
      const chatId = message.chat.id;
      const userId = message.from.id;
      const text = message.text;

      console.log(`Elite Market: Message from ${userId}: ${text}`);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
      if (text === '/start') {
        await handleStartCommand(chatId, message.from);
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏)
    if (update.callback_query) {
      const callbackQuery = update.callback_query;
      await handleCallbackQuery(callbackQuery);
    }

    res.status(200).json({ ok: true });
  } catch (error) {
    console.error('Elite Market webhook error:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
}

async function handleStartCommand(chatId: number, user: TelegramUser) {
  try {
    const firstName = user.first_name || '';
    const lastName = user.last_name || '';
    const username = user.username || '';
    const fullName = `${firstName} ${lastName}`.trim() || username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

    console.log(`Elite Market: Sending welcome message to ${fullName} (${chatId})`);

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try {
      await fetch(`${WEBAPP_URL}/api/auth/telegram-login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          telegramId: user.id.toString(),
          username: username,
          firstName: firstName,
          lastName: lastName,
          initData: 'bot_start'
        }),
      });
    } catch (dbError) {
      console.error('Error saving user to database:', dbError);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
    const welcomeMessage = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Elite Market! üõçÔ∏è

–ü—Ä–µ–º–∏—É–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–π –æ–¥–µ–∂–¥—ã, –æ–±—É–≤–∏ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ –æ—Ç –≤–µ–¥—É—â–∏—Ö –º–∏—Ä–æ–≤—ã—Ö –±—Ä–µ–Ω–¥–æ–≤.

–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –º–∏—Ä —Å—Ç–∏–ª—è –∏ –∫–∞—á–µ—Å—Ç–≤–∞!

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏? –ü–æ–µ—Ö–∞–ª–∏!`;

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å Elite Market',
            web_app: { url: WEBAPP_URL }
          }
        ],
        [
          {
            text: 'üì¢ –í—Å—Ç—É–ø–∞–π—Ç–µ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ Elite Market',
            url: CHANNEL_LINK
          }
        ]
      ]
    };

    if (!userBot) {
      throw new Error('Bot not configured');
    }

    await userBot.sendMessage(chatId, welcomeMessage, {
      reply_markup: keyboard,
      parse_mode: 'HTML'
    });

    console.log(`Elite Market: Welcome message sent to ${chatId}`);

  } catch (error) {
    console.error('Elite Market: Error handling start command:', error);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    try {
      if (!userBot) {
        throw new Error('Bot not configured');
      }
      await userBot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Elite Market! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    } catch (fallbackError) {
      console.error('Elite Market: Fallback message failed:', fallbackError);
    }
  }
}

async function handleCallbackQuery(callbackQuery: TelegramCallbackQuery) {
  try {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;

    console.log(`Elite Market: Callback from ${userId}: ${data}`);

    if (!userBot) {
      throw new Error('Bot not configured');
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
    await userBot.answerCallbackQuery(callbackQuery.id);

    switch (data) {
      case 'open_app':
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û—Ç–∫—Ä—ã—Ç—å Elite Market"
        await userBot!.answerCallbackQuery(callbackQuery.id, {
          text: '–û—Ç–∫—Ä—ã–≤–∞–µ–º Elite Market... üõçÔ∏è',
          show_alert: false
        });
        break;

      case 'join_channel':
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–í—Å—Ç—É–ø–∞–π—Ç–µ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ"
        await userBot!.answerCallbackQuery(callbackQuery.id, {
          text: '–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–∞—à –∫–∞–Ω–∞–ª! üì¢',
          show_alert: false
        });
        break;

      case 'check_subscription':
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        await checkUserSubscription(chatId, userId, callbackQuery.id);
        break;

      default:
        console.log(`Elite Market: Unknown callback data: ${data}`);
    }

  } catch (error) {
    console.error('Elite Market: Error handling callback query:', error);
  }
}

async function checkUserSubscription(chatId: number, userId: number, callbackQueryId: string) {
  try {
    if (!userBot) {
      throw new Error('Bot not configured');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª
    const chatMember = await userBot.getChatMember(CHANNEL_USERNAME, userId);
    const subscribedStatuses = ['member', 'administrator', 'creator'];
    const isSubscribed = subscribedStatuses.includes(chatMember.status);

    if (isSubscribed) {
      await userBot.answerCallbackQuery(callbackQueryId, {
        text: '‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Elite Market!',
        show_alert: true
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      const keyboard = {
        inline_keyboard: [
          [
            {
              text: 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å Elite Market',
              web_app: { url: WEBAPP_URL }
            }
          ]
        ]
      };

      await userBot.sendMessage(chatId, 
        'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ Elite Market!\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–µ–º–∏—É–º –æ–¥–µ–∂–¥—ã, –æ–±—É–≤–∏ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤:', 
        { reply_markup: keyboard }
      );

    } else {
      await userBot.answerCallbackQuery(callbackQueryId, {
        text: '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞',
        show_alert: true
      });
    }

  } catch (error) {
    console.error('Elite Market: Error checking subscription:', error);
    
    if (!userBot) {
      return;
    }
    
    await userBot.answerCallbackQuery(callbackQueryId, {
      text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      show_alert: true
    });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook (–≤—ã–∑—ã–≤–∞–π—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
export async function setupWebhook() {
  if (!userBot) {
    throw new Error('Elite Market bot not configured');
  }

  const webhookUrl = `${WEBAPP_URL}/api/webhook/telegram`;
  
  try {
    await userBot.setWebHook(webhookUrl);
    console.log(`Elite Market bot webhook set to: ${webhookUrl}`);
    return { success: true, url: webhookUrl };
  } catch (error) {
    console.error('Elite Market: Error setting webhook:', error);
    throw error;
  }
}