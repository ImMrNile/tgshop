// pages/index.tsx - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import { useEffect, useState, useCallback } from 'react';
import Head from 'next/head';
import Link from 'next/link';
import styles from '../styles/HomePage.module.css';
import { FaArrowRight, FaSearch, FaFilter, FaRedo, FaHome, FaUser, FaShoppingCart, FaHeart, FaTimes } from 'react-icons/fa';

interface ProductVariant {
  id: string;
  size: string;
  stock: number;
  color?: string;
}

interface Product {
  id: string;
  name: string;
  brand?: string;
  description?: string;
  price: string;
  oldPrice?: string;
  currentPrice: string;
  images: string[];
  variants: ProductVariant[];
}

// –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
const categoryTranslations = {
  'CLOTHING': '–û–¥–µ–∂–¥–∞',
  'FOOTWEAR': '–û–±—É–≤—å', 
  'ACCESSORIES': '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã'
};

const seasonTranslations = {
  'SPRING': '–í–µ—Å–Ω–∞',
  'SUMMER': '–õ–µ—Ç–æ',
  'AUTUMN': '–û—Å–µ–Ω—å',
  'WINTER': '–ó–∏–º–∞',
  'ALL_SEASON': '–í—Å–µ—Å–µ–∑–æ–Ω–Ω–∞—è'
};

const genderTranslations = {
  'MALE': '–ú—É–∂—Å–∫–∞—è',
  'FEMALE': '–ñ–µ–Ω—Å–∫–∞—è',
  'UNISEX': '–£–Ω–∏—Å–µ–∫—Å'
};

const categories = Object.keys(categoryTranslations);
const seasons = Object.keys(seasonTranslations);
const genders = Object.keys(genderTranslations);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç ProductCard
const ProductCard: React.FC<{ product: Product }> = ({ product }) => {
  const imageUrl = product.images && product.images.length > 0 ? product.images[0] : '/placeholder.jpg';
  const displayPrice = parseFloat(product.currentPrice).toLocaleString('ru-RU', { style: 'currency', currency: 'RUB', minimumFractionDigits: 0 });
  const oldPrice = product.oldPrice ? parseFloat(product.oldPrice).toLocaleString('ru-RU', { style: 'currency', currency: 'RUB', minimumFractionDigits: 0 }) : null;

  return (
    <Link href={`/products/${product.id}`} className={styles.productCard}>
      <div className={styles.productImageContainer}>
        <img src={imageUrl} alt={product.name} className={styles.productImage} />
        <div className={styles.productBadge}>
          {oldPrice && parseFloat(product.oldPrice!) > parseFloat(product.currentPrice) && (
            <span className={styles.discountBadge}>
              -{Math.round((1 - parseFloat(product.currentPrice) / parseFloat(product.oldPrice!)) * 100)}%
            </span>
          )}
        </div>
      </div>
      <div className={styles.productInfo}>
        <h3 className={styles.productName}>{product.name}</h3>
        <p className={styles.productBrand}>{product.brand || '–ë–µ–∑ –±—Ä–µ–Ω–¥–∞'}</p>
        <div className={styles.productPrice}>
          <span className={styles.currentPrice}>{displayPrice}</span>
          {oldPrice && parseFloat(product.oldPrice!) > parseFloat(product.currentPrice) && (
            <span className={styles.oldPrice}>{oldPrice}</span>
          )}
        </div>
        <button className={styles.addToCartButton}>
          –ü–æ–¥—Ä–æ–±–Ω–µ–µ <FaArrowRight className={styles.buttonIcon} />
        </button>
      </div>
    </Link>
  );
};

export default function HomePage() {
  const [products, setProducts] = useState<Product[]>([]);
  const [allBrands, setAllBrands] = useState<string[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [filtersOpen, setFiltersOpen] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –ø–æ–∏—Å–∫–∞
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('');
  const [selectedSeason, setSelectedSeason] = useState('');
  const [selectedGender, setSelectedGender] = useState('');
  const [selectedBrand, setSelectedBrand] = useState('');

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const fetchProducts = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      const queryParams = new URLSearchParams();
      if (searchTerm) queryParams.append('search', searchTerm);
      if (selectedCategory) queryParams.append('category', selectedCategory);
      if (selectedSeason) queryParams.append('season', selectedSeason);
      if (selectedGender) queryParams.append('gender', selectedGender);

      const res = await fetch(`/api/products?${queryParams.toString()}`);
      if (!res.ok) {
        throw new Error(`–û—à–∏–±–∫–∞: ${res.status}`);
      }
      const data = await res.json();
      
      // –§–∏–ª—å—Ç—Ä –ø–æ –±—Ä–µ–Ω–¥—É –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ (–µ—Å–ª–∏ –±—ç–∫–µ–Ω–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)
      let filteredData = data;
      if (selectedBrand) {
        filteredData = data.filter((p: Product) => 
          p.brand && p.brand.toLowerCase().includes(selectedBrand.toLowerCase())
        );
      }
      
      setProducts(filteredData);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±—Ä–µ–Ω–¥—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
      const brands = [...new Set(data.map((p: Product) => p.brand).filter(Boolean))].sort();
      setAllBrands(brands);
    } catch (err: any) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  }, [searchTerm, selectedCategory, selectedSeason, selectedGender, selectedBrand]);

  // –ó–∞–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  useEffect(() => {
    fetchProducts();
  }, [fetchProducts]);

  const handleResetFilters = () => {
    setSearchTerm('');
    setSelectedCategory('');
    setSelectedSeason('');
    setSelectedGender('');
    setSelectedBrand('');
    setFiltersOpen(false);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Elite App - –õ—é–∫—Å –∫–æ–ø–∏–∏</title>
        <meta name="description" content="–ü—Ä–µ–º–∏—É–º –ª—é–∫—Å –∫–æ–ø–∏–∏ –±—Ä–µ–Ω–¥–æ–≤–æ–π –æ–¥–µ–∂–¥—ã. –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ü–µ–Ω–∞–º." />
        <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" />
      </Head>

      {/* Hero Section —Å —á–µ—Å—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
      <section className={styles.hero}>
        <div className={styles.heroBackground}></div>
        <div className={styles.heroContent}>
          <h1 className={styles.heroTitle}>Elite Fashion</h1>
          <p className={styles.heroSubtitle}>
            –ü—Ä–µ–º–∏—É–º –ª—é–∫—Å –∫–æ–ø–∏–∏ ‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–Ω—ã
          </p>
          <div className={styles.heroFeatures}>
            <div className={styles.feature}>
              <span className={styles.featureIcon}>‚≠ê</span>
              <span className={styles.featureText}>–õ—é–∫—Å –∫–∞—á–µ—Å—Ç–≤–æ</span>
            </div>
            <div className={styles.feature}>
              <span className={styles.featureIcon}>üí∞</span>
              <span className={styles.featureText}>–õ—É—á—à–∏–µ —Ü–µ–Ω—ã</span>
            </div>
            <div className={styles.feature}>
              <span className={styles.featureIcon}>üõ°Ô∏è</span>
              <span className={styles.featureText}>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞</span>
            </div>
          </div>
        </div>
      </section>

      <main className={styles.mainContent}>
        {/* –ú–æ–±–∏–ª—å–Ω–∞—è —à–∞–ø–∫–∞ —Å –ø–æ–∏—Å–∫–æ–º */}
        <div className={styles.mobileHeader}>
          <div className={styles.searchBarMobile}>
            <FaSearch className={styles.searchIcon} />
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className={styles.searchInput}
            />
            <button 
              onClick={() => setFiltersOpen(!filtersOpen)}
              className={`${styles.filterToggle} ${filtersOpen ? styles.filterToggleActive : ''}`}
            >
              {filtersOpen ? <FaTimes /> : <FaFilter />}
            </button>
          </div>
        </div>

        {/* –°–µ–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ë–ï–ó overlay */}
        <div className={`${styles.filtersSection} ${filtersOpen ? styles.filtersOpen : ''}`}>
          <div className={styles.filtersGrid}>
            <select
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
              className={styles.filterSelect}
            >
              <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
              {categories.map((cat) => (
                <option key={cat} value={cat}>
                  {categoryTranslations[cat as keyof typeof categoryTranslations]}
                </option>
              ))}
            </select>

            <select
              value={selectedBrand}
              onChange={(e) => setSelectedBrand(e.target.value)}
              className={styles.filterSelect}
            >
              <option value="">–í—Å–µ –±—Ä–µ–Ω–¥—ã</option>
              {allBrands.map((brand) => (
                <option key={brand} value={brand}>{brand}</option>
              ))}
            </select>

            <select
              value={selectedSeason}
              onChange={(e) => setSelectedSeason(e.target.value)}
              className={styles.filterSelect}
            >
              <option value="">–í—Å–µ —Å–µ–∑–æ–Ω—ã</option>
              {seasons.map((s) => (
                <option key={s} value={s}>
                  {seasonTranslations[s as keyof typeof seasonTranslations]}
                </option>
              ))}
            </select>

            <select
              value={selectedGender}
              onChange={(e) => setSelectedGender(e.target.value)}
              className={styles.filterSelect}
            >
              <option value="">–í—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏</option>
              {genders.map((g) => (
                <option key={g} value={g}>
                  {genderTranslations[g as keyof typeof genderTranslations]}
                </option>
              ))}
            </select>
          </div>

          <div className={styles.filterActions}>
            <button onClick={fetchProducts} className={styles.applyButton}>
              <FaFilter className={styles.buttonIcon} /> –ü—Ä–∏–º–µ–Ω–∏—Ç—å
            </button>
            <button onClick={handleResetFilters} className={styles.resetButton}>
              <FaRedo className={styles.buttonIcon} /> –°–±—Ä–æ—Å–∏—Ç—å
            </button>
          </div>
        </div>

        {/* Product Collection Section */}
        <section className={styles.collectionSection}>
          <div className={styles.collectionHeader}>
            <div className={styles.collectionTitleWrapper}>
              <h2 className={styles.collectionTitle}>–ù–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è</h2>
              <span className={styles.collectionSubtitle}>
                {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : 
                 products.length === 0 ? '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤' :
                 `${products.length} ${products.length === 1 ? '—Ç–æ–≤–∞—Ä' : products.length < 5 ? '—Ç–æ–≤–∞—Ä–∞' : '—Ç–æ–≤–∞—Ä–æ–≤'} –Ω–∞–π–¥–µ–Ω–æ`}
              </span>
            </div>
          </div>
          
          {loading ? (
            <div className={styles.loadingState}>
              <div className={styles.spinner}></div>
              <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</p>
            </div>
          ) : error ? (
            <div className={styles.errorState}>
              <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {error}</p>
              <button onClick={fetchProducts} className={styles.retryButton}>
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
              </button>
            </div>
          ) : products.length === 0 ? (
            <div className={styles.emptyState}>
              <FaSearch className={styles.emptyIcon} />
              <h3>–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
              <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</p>
              <button onClick={handleResetFilters} className={styles.resetButton}>
                –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
              </button>
            </div>
          ) : (
            <div className={styles.productGrid}>
              {products.map((product) => (
                <ProductCard key={product.id} product={product} />
              ))}
            </div>
          )}
        </section>
      </main>

      {/* –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø */}
      <nav className={styles.bottomNav}>
        <Link href="/" className={styles.navItem}>
          <FaHome className={styles.navIcon} />
          <span className={styles.navLabel}>–ì–ª–∞–≤–Ω–∞—è</span>
          <div className={styles.navIndicator}></div>
        </Link>
        <Link href="/favorites" className={styles.navItem}>
          <FaHeart className={styles.navIcon} />
          <span className={styles.navLabel}>–ò–∑–±—Ä–∞–Ω–Ω–æ–µ</span>
          <div className={styles.navBadge}>3</div>
        </Link>
        <Link href="/cart" className={styles.navItem}>
          <FaShoppingCart className={styles.navIcon} />
          <span className={styles.navLabel}>–ö–æ—Ä–∑–∏–Ω–∞</span>
          <div className={styles.navBadge}>2</div>
        </Link>
        <Link href="/profile" className={styles.navItem}>
          <FaUser className={styles.navIcon} />
          <span className={styles.navLabel}>–ü—Ä–æ—Ñ–∏–ª—å</span>
        </Link>
      </nav>
    </div>
  );
}