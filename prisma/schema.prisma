// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// МОДЕЛИ ДАННЫХ

model User {
  id                 String           @id @default(uuid())
  telegramId         String           @unique
  username           String?
  firstName          String?
  lastName           String?
  languageCode       String?
  referralCode       String?          @unique
  referredById       String?
  isKOL              Boolean          @default(false)
  referralPercentage Float            @default(3.0)
  personalDiscount   Decimal?         @db.Decimal(10, 2)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  // Связи
  referredUsers   User[]           @relation("Referrals")
  referrer        User?            @relation("Referrals", fields: [referredById], references: [id], onDelete: SetNull)
  orders          Order[]
  deliveryDetails DeliveryDetail[]
  reviews         Review[]
  referralPayouts ReferralPayout[]
}

model DeliveryDetail {
  id          String          @id @default(uuid())
  userId      String
  type        DeliveryService
  address     String
  postalCode  String
  country     String
  city        String
  region      String?
  phoneNumber String
  fullName    String
  isDefault   Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, address])
}

model Product {
  id               String   @id @default(uuid())
  name             String
  description      String?
  composition      String?
  careInstructions String?
  brand            String?
  category         Category
  season           Season
  gender           Gender
  price            Decimal  @db.Decimal(10, 2)
  oldPrice         Decimal? @db.Decimal(10, 2)
  currentPrice     Decimal  @db.Decimal(10, 2)
  costPrice        Decimal  @db.Decimal(10, 2)
  images           String[]
  videos           String[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Связи
  variants   ProductVariant[]
  orderItems OrderItem[]
  reviews    Review[]
}

model ProductVariant {
  id        String @id @default(uuid())
  productId String
  color     String?
  size      String
  stock     Int

  // Связи
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@unique([productId, color, size])
}

model Order {
  id                      String        @id @default(uuid())
  userId                  String
  deliveryType            DeliveryService
  deliveryAddress         String
  deliveryPostalCode      String
  deliveryCountry         String
  deliveryCity            String
  deliveryRegion          String?
  deliveryPhoneNumber     String
  deliveryFullName        String
  totalAmount             Decimal       @db.Decimal(10, 2)
  status                  OrderStatus   @default(PENDING)
  paymentMethod           PaymentMethod
  paymentId               String?       @unique
  trackingNumber          String?
  trackingLink            String?
  deliveryCostPaidByAdmin Decimal?      @db.Decimal(10, 2)
  acquiringFee            Decimal?      @db.Decimal(10, 2)
  referralFee             Decimal?      @db.Decimal(10, 2)
  profit                  Decimal?      @db.Decimal(10, 2)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt

  // Связи
  user           User            @relation(fields: [userId], references: [id], onDelete: Restrict)
  items          OrderItem[]
  comments       Comment[]
  referralPayout ReferralPayout?
}

model OrderItem {
  id               String @id @default(uuid())
  orderId          String
  productId        String
  productVariantId String
  productName      String
  productPrice     Decimal @db.Decimal(10, 2)
  productCostPrice Decimal @db.Decimal(10, 2)
  quantity         Int

  // Связи
  order          Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product        Product        @relation(fields: [productId], references: [id], onDelete: Restrict)
  productVariant ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Restrict)
}

model Comment {
  id         String   @id @default(uuid())
  text       String?
  imageUrls  String[]
  authorRole Role     @default(ADMIN)
  createdAt  DateTime @default(now())
  orderId    String

  // Связи
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(uuid())
  rating    Float
  text      String?
  imageUrls String[]
  createdAt DateTime @default(now())
  userId    String
  productId String

  // Связи
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ReferralPayout {
  id        String   @id @default(uuid())
  userId    String
  orderId   String   @unique
  amount    Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  // Связи
  user  User  @relation(fields: [userId], references: [id])
  order Order @relation(fields: [orderId], references: [id])
}

// ПЕРЕЧИСЛЕНИЯ (ENUMS)

enum Role {
  ADMIN
  USER
}

enum Category {
  CLOTHING
  FOOTWEAR
  ACCESSORIES
}

enum Season {
  SPRING
  SUMMER
  AUTUMN
  WINTER
  ALL_SEASON
}

enum Gender {
  MALE
  FEMALE
  UNISEX
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  TELEGRAM_STARS
  CARD
  SBP
}

enum DeliveryService {
  POST_RF
  SDEK
  BOXBERRY
  FIVE_POST
  YANDEX_PVZ
  COURIER
  OTHER
}