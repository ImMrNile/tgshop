// lib/telegram-notifier.ts
import prisma from './prisma'; 
import { Order, User, OrderStatus } from '@prisma/client'; // Keep types, they are used implicitly

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN!; 

// –ë–∞–∑–æ–≤—ã–π URL –≤–∞—à–µ–≥–æ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const APP_BASE_URL = process.env.VERCEL_APP_URL || 'https://example.com'; 

interface NotificationOptions {
  parse_mode?: 'Markdown' | 'HTML' | 'MarkdownV2';
  reply_markup?: { 
    inline_keyboard?: { text: string; url?: string; web_app?: { url: string } }[][];
    keyboard?: { text: string }[][];
    resize_keyboard?: boolean;
    one_time_keyboard?: boolean;
    remove_keyboard?: boolean;
    selective?: boolean;
  };
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é Telegram.
 * @param telegramId –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
 * @param message –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
 * @param options –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞).
 * @returns true, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ false.
 */
export async function sendTelegramNotification(
  telegramId: string,
  message: string,
  options?: NotificationOptions
): Promise<boolean> {
  if (!BOT_TOKEN) {
    console.error('TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.');
    return false;
  }
  if (!telegramId) {
    console.warn('sendTelegramNotification: telegramId –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.');
    return false;
  }

  const telegramApiUrl = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;

  try {
    const response = await fetch(telegramApiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: telegramId,
        text: message,
        parse_mode: options?.parse_mode || 'MarkdownV2', 
        reply_markup: options?.reply_markup,
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}:`, errorData);
      return false;
    } else {
      console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ Telegram —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}.`);
      return true;
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ HTTP-–∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram API –¥–ª—è ${telegramId}:`, error);
    return false;
  }
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2.
 * @param text –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.
 * @returns –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
 */
function escapeMarkdownV2(text: string): string {
  // –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ MarkdownV2
  const charactersToEscape = /([_*\[\]()~`>#+\-=|{}.!])/g;
  return text.replace(charactersToEscape, '\\$1');
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –µ–≥–æ –∑–∞–∫–∞–∑–∞.
 * @param orderId ID –∑–∞–∫–∞–∑–∞.
 * @param newStatus –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞.
 */
export async function notifyOrderStatusChange(orderId: string, newStatus: OrderStatus) {
  const order = await prisma.order.findUnique({
    where: { id: orderId },
    include: { user: true } 
  }) as (Order & { user: User }) | null; // –Ø–≤–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

  if (!order || !order.user || !order.user.telegramId) {
    console.warn(`–ó–∞–∫–∞–∑ ${orderId} –∏–ª–∏ –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç telegramId. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.`);
    return;
  }

  let message = `üõçÔ∏è \\*–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ ‚Ññ${escapeMarkdownV2(order.id.substring(0, 8).toUpperCase())} –∏–∑–º–µ–Ω–∏–ª—Å—è\\!\\*`;

  switch (newStatus) {
    case OrderStatus.PENDING:
      message += `\n\n–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: \\*–í –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\\*`;
      message += `\n–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –∑–∞–∫–∞–∑ –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏\\!`;
      break;
    case OrderStatus.PAID:
      message += `\n\n–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: \\*–û–ø–ª–∞—á–µ–Ω\\*`;
      message += `\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É\\! –í–∞—à –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É\\.`;
      break;
    case OrderStatus.PROCESSING:
      message += `\n\n–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: \\*–í –æ–±—Ä–∞–±–æ—Ç–∫–µ\\*`;
      message += `\n–í–∞—à –∑–∞–∫–∞–∑ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –∏ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ\\.`;
      break;
    case OrderStatus.SHIPPED:
      message += `\n\n–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: \\*–û—Ç–ø—Ä–∞–≤–ª–µ–Ω\\*`;
      message += `\n–í–∞—à –∑–∞–∫–∞–∑ —É–∂–µ –≤ –ø—É—Ç–∏\\!`;
      if (order.trackingNumber) {
        const trackingNumber = escapeMarkdownV2(order.trackingNumber);
        const trackingLink = order.trackingLink ? `[–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ](${escapeMarkdownV2(order.trackingLink)})` : `–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: \`${trackingNumber}\``;
        message += `\n${trackingLink}`;
      }
      break;
    case OrderStatus.DELIVERED:
      message += `\n\n–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: \\*–î–æ—Å—Ç–∞–≤–ª–µ–Ω\\*`;
      message += `\n–ù–∞–¥–µ–µ–º—Å—è, –≤–∞–º –≤—Å—ë –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å\\! –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∞—à–µ–º—É –æ—Ç–∑—ã–≤—É\\.`;
      break;
    case OrderStatus.CANCELLED:
      message += `\n\n–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: \\*–û—Ç–º–µ–Ω–µ–Ω\\*`;
      message += `\n–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω\\. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\\.`;
      break;
    case OrderStatus.REFUNDED:
      message += `\n\n–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: \\*–í–æ–∑–≤—Ä–∞—â–µ–Ω\\*`;
      message += `\n–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑ –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã\\.`;
      break;
    default:
      message += `\n\n–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: \\*${escapeMarkdownV2(newStatus)}\\*`;
      break;
  }
  
  message += `\n\n[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞](${escapeMarkdownV2(`${APP_BASE_URL}/orders/${order.id}`)})`;

  await sendTelegramNotification(order.user.telegramId, message, { parse_mode: 'MarkdownV2' });
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –∑–∞–∫–∞–∑—É.
 * @param orderId ID –∑–∞–∫–∞–∑–∞.
 * @param messageText –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
 */
export async function notifyNewManagerMessage(orderId: string, messageText: string) {
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ order –∑–¥–µ—Å—å –∏–º–µ–µ—Ç —Ç–∏–ø Order & { user: User }
  const order = await prisma.order.findUnique({
    where: { id: orderId },
    include: { user: true }
  }) as (Order & { user: User }) | null; // –Ø–≤–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞

  if (!order || !order.user || !order.user.telegramId) {
    console.warn(`–ó–∞–∫–∞–∑ ${orderId} –∏–ª–∏ –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç telegramId. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.`);
    return;
  }

  const message = `üí¨ \\*–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É ‚Ññ${escapeMarkdownV2(order.id.substring(0, 8).toUpperCase())}\\*

–ú–µ–Ω–µ–¥–∂–µ—Ä: _"${escapeMarkdownV2(messageText)}"_

[–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑—É](${escapeMarkdownV2(`${APP_BASE_URL}/orders/${order.id}`)})`;

  await sendTelegramNotification(order.user.telegramId, message, { parse_mode: 'MarkdownV2' });
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ –Ω–æ–≤–æ–π –∞–∫—Ü–∏–∏).
 * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤–∞—à–µ–π –ë–î.
 * @param updateMessage –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
 */
export async function notifyGeneralUpdate(userId: string, updateMessage: string) {
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ user –∑–¥–µ—Å—å –∏–º–µ–µ—Ç —Ç–∏–ø User
  const user = await prisma.user.findUnique({
    where: { id: userId }
  }) as User | null; // –Ø–≤–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞

  if (!user || !user.telegramId) {
    console.warn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç telegramId. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.`);
    return;
  }

  const message = `üì¢ \\*–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Hedonist:\\*
${escapeMarkdownV2(updateMessage)}

[–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ](${escapeMarkdownV2(APP_BASE_URL)})`;

  await sendTelegramNotification(user.telegramId, message, { parse_mode: 'MarkdownV2' });
}